version: '3.8'

services:
  # ==============================================
  # Content Generation Service
  # ==============================================
  content-service:
    build:
      context: ./services/content-service
      dockerfile: Dockerfile
    container_name: autopublisher_content_service
    ports:
      - "8001:8000"
    volumes:
      - ./services/content-service/app:/app/app
    env_file:
      - .env
    environment:
      - SERVICE_NAME=content-service
      - REDIS_URL=redis://redis:6379/0
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - autopublisher_network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # ==============================================
  # Publishing Service
  # ==============================================
  publishing-service:
    build:
      context: ./services/publishing-service
      dockerfile: Dockerfile
    container_name: autopublisher_publishing_service
    ports:
      - "8002:8000"
    volumes:
      - ./services/publishing-service/app:/app/app
    env_file:
      - .env
    environment:
      - SERVICE_NAME=publishing-service
      - REDIS_URL=redis://redis:6379/0
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - autopublisher_network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # ==============================================
  # Strategy Service (Content Strategy AI)
  # ==============================================
  strategy-service:
    build:
      context: ./services/strategy-service
      dockerfile: Dockerfile
    container_name: autopublisher_strategy_service
    ports:
      - "8004:8000"
    volumes:
      - ./services/strategy-service/app:/app/app
    env_file:
      - .env
    environment:
      - SERVICE_NAME=strategy-service
      - REDIS_URL=redis://redis:6379/0
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - autopublisher_network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # ==============================================
  # Orchestrator Service
  # ==============================================
  orchestrator-service:
    build:
      context: ./services/orchestrator-service
      dockerfile: Dockerfile
    container_name: autopublisher_orchestrator_service
    ports:
      - "8003:8000"
    volumes:
      - ./services/orchestrator-service/app:/app/app
    env_file:
      - .env
    environment:
      - SERVICE_NAME=orchestrator-service
      - REDIS_URL=redis://redis:6379/0
      - CONTENT_SERVICE_URL=http://content-service:8000
      - PUBLISHING_SERVICE_URL=http://publishing-service:8000
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - autopublisher_network
    depends_on:
      - redis
      - postgres
      - content-service
      - publishing-service
    restart: unless-stopped

  # ==============================================
  # Celery Worker (Background Tasks)
  # ==============================================
  celery-worker:
    build:
      context: ./services/orchestrator-service
      dockerfile: Dockerfile
    container_name: autopublisher_celery_worker
    volumes:
      - ./services/orchestrator-service/app:/app/app
    env_file:
      - .env
    environment:
      - SERVICE_NAME=celery-worker
      - REDIS_URL=redis://redis:6379/0
      - CONTENT_SERVICE_URL=http://content-service:8000
      - PUBLISHING_SERVICE_URL=http://publishing-service:8000
    command: celery -A app.core.celery_app worker --loglevel=info
    networks:
      - autopublisher_network
    depends_on:
      - redis
      - postgres
      - content-service
      - publishing-service
    restart: unless-stopped

  # ==============================================
  # Celery Beat (Scheduled Tasks)
  # ==============================================
  celery-beat:
    build:
      context: ./services/orchestrator-service
      dockerfile: Dockerfile
    container_name: autopublisher_celery_beat
    volumes:
      - ./services/orchestrator-service/app:/app/app
    env_file:
      - .env
    environment:
      - SERVICE_NAME=celery-beat
      - REDIS_URL=redis://redis:6379/0
    command: celery -A app.core.celery_app beat --loglevel=info
    networks:
      - autopublisher_network
    depends_on:
      - redis
    restart: unless-stopped

  # ==============================================
  # Flower (Celery Monitoring)
  # ==============================================
  flower:
    build:
      context: ./services/orchestrator-service
      dockerfile: Dockerfile
    container_name: autopublisher_flower
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: celery -A app.core.celery_app flower --port=5555
    ports:
      - "5555:5555"
    networks:
      - autopublisher_network
    depends_on:
      - redis
      - celery-worker
    restart: unless-stopped

  # ==============================================
  # PostgreSQL Database
  # ==============================================
  postgres:
    image: postgres:15-alpine
    container_name: autopublisher_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - "5432:5432"
    networks:
      - autopublisher_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==============================================
  # Redis (Task Queue & Cache)
  # ==============================================
  redis:
    image: redis:7-alpine
    container_name: autopublisher_redis
    ports:
      - "6379:6379"
    networks:
      - autopublisher_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# ==============================================
# Volumes
# ==============================================
volumes:
  postgres_data:
    driver: local

# ==============================================
# Networks
# ==============================================
networks:
  autopublisher_network:
    driver: bridge


  # Auth Service
  auth-service:
    build: ./services/auth-service
    container_name: autopublisher_auth
    ports:
      - "8005:8000"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    networks:
      - autopublisher_network
    restart: unless-stopped
